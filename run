#!/bin/bash
set -euo pipefail
IFS=$'\n\t'
trap 'echo FATAL ERROR EXIT CODE $? AT $0:$LINENO' ERR

#
# usage:
#   ./run
#   WITH_CUDA=true ./run
#

export WITH_CUDA=${WITH_CUDA:-false}

which make || sudo apt-get install -y build-essential

# note: as a workaround to
# https://stackoverflow.com/questions/74350584/nvcc-compilation-error-using-thrust-in-cuda-11-5
# > /usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with ‘...’:
# >   435 |         function(_Functor&& __f)
# >       |                                                                                                                                                 ^ 
# > /usr/include/c++/11/bits/std_function.h:435:145: note:         ‘_ArgTypes’
# > /usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with ‘...’:
# >   530 |         operator=(_Functor&& __f)
# >       |                                                                                                                                                  ^ 
# > /usr/include/c++/11/bits/std_function.h:530:146: note:         ‘_ArgTypes’
# it seems a version if nvcc > 11.5 is required; 11.8 seems good, I did not yet get it to work with 12.3...
if test "${WITH_CUDA:-false}" == true ; then
    OLDPATH="$PATH"

    # install nvcc
    export PATH="/usr/local/cuda-11.8/bin:/usr/local/cuda-11.5/bin:/usr/local/cuda-12.3/bin:$OLDPATH"
    if ! which nvcc || ( nvcc --version | grep '11.5' ) ; then 
        ./scripts/install-cuda # sudo apt-get install -y nvidia-cuda-toolkit
    fi

    # should not be necessary...? yes it should: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
    export PATH="/usr/local/cuda-12.3/bin:$OLDPATH"
    nvcc --version
fi

openni2d='OpenNI-Linux-x64-2.2'
if ! test -d "$openni2d" ; then
    openni2='OpenNI-Linux-x64-2.2.0.33'
    pushd lib
    #wget --no-clobber https://s3.amazonaws.com/com.occipital.openni/$openni2.tar.bz2
    popd

    cp --verbose ./lib/$openni2.tar.bz2 .
    tar xvf $openni2.tar.bz2
fi

which cmake || sudo apt-get install -y cmake
sudo apt-get install -y freeglut3-dev

(
cd InfiniTAM

#export CUDA_CUDART_LIBRARY=/usr/local/cuda-11.8/lib64/libcudart.so
#export CUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.8/include

# clean
if true ; then
rm -rf CMakeFiles # cmake "$(realpath .)" --target clean
git clean -fX
rm -rf build
fi

# Ensure build dir exists
mkdir -p build

cd build
#     -DCUDA_CUDART_LIBRARY=$CUDA_CUDART_LIBRARY -DCUDA_TOOLKIT_INCLUDE=$CUDA_TOOLKIT_INCLUDE \

cmake "$(realpath ..)" -DCMAKE_BUILD_TYPE=Release -DOPEN_NI_ROOT="$(realpath ../../$openni2d)" -DWITH_CUDA="${WITH_CUDA:-false}"
#make clean
make

cd ..

# this should also work:
if false ; then
rm -rf build # build-nix expects this folder to not exist
#./build-nix.sh 'Unix Makefiles' Debug
./build-nix.sh 'Unix Makefiles' Release
fi

)

pwd

./scripts/dist

# run it once

# must have device and driver to run with cuda
if test "${WITH_CUDA:-false}" == true ; then
    OLDPATH="$PATH"

    echo "Your NVIDIA device:"
    ( lspci | grep -i nvidia | grep -i vga ) || ( lspci | grep -i '3D controller' | grep -i Microsoft ) # wsl: 988f:00:00.0 3D controller: Microsoft Corporation Device 008e

    # Install nvidia driver https://ubuntu.com/server/docs/nvidia-drivers-installation
    # not needed on WSL, assuming host already has nvidia drivers
    if ! which explorer.exe ; then
        sudo ubuntu-drivers list
        sudo ubuntu-drivers list --gpgpu
        sudo ubuntu-drivers install nvidia
        echo "You will need to reboot for the driver to work! Otherwise, you will see:"
        echo "cuda_compute_capability.cpp
    -- Compile: Couldn't get device count: no CUDA-capable device is detected
    "
    fi
fi

./data/download-teddy

./InfiniTAM/build/Apps/InfiniTAM_cli/InfiniTAM_cli Teddy/calib.txt Teddy/Frames/%04i.ppm Teddy/Frames/%04i.pgm
./InfiniTAM/build/Apps/InfiniTAM/InfiniTAM Teddy/calib.txt Teddy/Frames/%04i.ppm Teddy/Frames/%04i.pgm
